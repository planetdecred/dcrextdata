// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testHistoricData(t *testing.T) {
	t.Parallel()

	query := HistoricData()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testHistoricDataDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HistoricDatum{}
	if err = randomize.Struct(seed, o, historicDatumDBTypes, true, historicDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HistoricDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := HistoricData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testHistoricDataQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HistoricDatum{}
	if err = randomize.Struct(seed, o, historicDatumDBTypes, true, historicDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HistoricDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := HistoricData().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := HistoricData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testHistoricDataSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HistoricDatum{}
	if err = randomize.Struct(seed, o, historicDatumDBTypes, true, historicDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HistoricDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := HistoricDatumSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := HistoricData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testHistoricDataExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HistoricDatum{}
	if err = randomize.Struct(seed, o, historicDatumDBTypes, true, historicDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HistoricDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := HistoricDatumExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if HistoricDatum exists: %s", err)
	}
	if !e {
		t.Errorf("Expected HistoricDatumExists to return true, but got false.")
	}
}

func testHistoricDataFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HistoricDatum{}
	if err = randomize.Struct(seed, o, historicDatumDBTypes, true, historicDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HistoricDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	historicDatumFound, err := FindHistoricDatum(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if historicDatumFound == nil {
		t.Error("want a record, got nil")
	}
}

func testHistoricDataBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HistoricDatum{}
	if err = randomize.Struct(seed, o, historicDatumDBTypes, true, historicDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HistoricDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = HistoricData().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testHistoricDataOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HistoricDatum{}
	if err = randomize.Struct(seed, o, historicDatumDBTypes, true, historicDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HistoricDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := HistoricData().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testHistoricDataAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	historicDatumOne := &HistoricDatum{}
	historicDatumTwo := &HistoricDatum{}
	if err = randomize.Struct(seed, historicDatumOne, historicDatumDBTypes, false, historicDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HistoricDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, historicDatumTwo, historicDatumDBTypes, false, historicDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HistoricDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = historicDatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = historicDatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := HistoricData().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testHistoricDataCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	historicDatumOne := &HistoricDatum{}
	historicDatumTwo := &HistoricDatum{}
	if err = randomize.Struct(seed, historicDatumOne, historicDatumDBTypes, false, historicDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HistoricDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, historicDatumTwo, historicDatumDBTypes, false, historicDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HistoricDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = historicDatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = historicDatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := HistoricData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func historicDatumBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *HistoricDatum) error {
	*o = HistoricDatum{}
	return nil
}

func historicDatumAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *HistoricDatum) error {
	*o = HistoricDatum{}
	return nil
}

func historicDatumAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *HistoricDatum) error {
	*o = HistoricDatum{}
	return nil
}

func historicDatumBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *HistoricDatum) error {
	*o = HistoricDatum{}
	return nil
}

func historicDatumAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *HistoricDatum) error {
	*o = HistoricDatum{}
	return nil
}

func historicDatumBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *HistoricDatum) error {
	*o = HistoricDatum{}
	return nil
}

func historicDatumAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *HistoricDatum) error {
	*o = HistoricDatum{}
	return nil
}

func historicDatumBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *HistoricDatum) error {
	*o = HistoricDatum{}
	return nil
}

func historicDatumAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *HistoricDatum) error {
	*o = HistoricDatum{}
	return nil
}

func testHistoricDataHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &HistoricDatum{}
	o := &HistoricDatum{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, historicDatumDBTypes, false); err != nil {
		t.Errorf("Unable to randomize HistoricDatum object: %s", err)
	}

	AddHistoricDatumHook(boil.BeforeInsertHook, historicDatumBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	historicDatumBeforeInsertHooks = []HistoricDatumHook{}

	AddHistoricDatumHook(boil.AfterInsertHook, historicDatumAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	historicDatumAfterInsertHooks = []HistoricDatumHook{}

	AddHistoricDatumHook(boil.AfterSelectHook, historicDatumAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	historicDatumAfterSelectHooks = []HistoricDatumHook{}

	AddHistoricDatumHook(boil.BeforeUpdateHook, historicDatumBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	historicDatumBeforeUpdateHooks = []HistoricDatumHook{}

	AddHistoricDatumHook(boil.AfterUpdateHook, historicDatumAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	historicDatumAfterUpdateHooks = []HistoricDatumHook{}

	AddHistoricDatumHook(boil.BeforeDeleteHook, historicDatumBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	historicDatumBeforeDeleteHooks = []HistoricDatumHook{}

	AddHistoricDatumHook(boil.AfterDeleteHook, historicDatumAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	historicDatumAfterDeleteHooks = []HistoricDatumHook{}

	AddHistoricDatumHook(boil.BeforeUpsertHook, historicDatumBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	historicDatumBeforeUpsertHooks = []HistoricDatumHook{}

	AddHistoricDatumHook(boil.AfterUpsertHook, historicDatumAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	historicDatumAfterUpsertHooks = []HistoricDatumHook{}
}

func testHistoricDataInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HistoricDatum{}
	if err = randomize.Struct(seed, o, historicDatumDBTypes, true, historicDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HistoricDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := HistoricData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testHistoricDataInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HistoricDatum{}
	if err = randomize.Struct(seed, o, historicDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize HistoricDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(historicDatumColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := HistoricData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testHistoricDataReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HistoricDatum{}
	if err = randomize.Struct(seed, o, historicDatumDBTypes, true, historicDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HistoricDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testHistoricDataReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HistoricDatum{}
	if err = randomize.Struct(seed, o, historicDatumDBTypes, true, historicDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HistoricDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := HistoricDatumSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testHistoricDataSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HistoricDatum{}
	if err = randomize.Struct(seed, o, historicDatumDBTypes, true, historicDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HistoricDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := HistoricData().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	historicDatumDBTypes = map[string]string{`CreatedOn`: `timestamp without time zone`, `ExchangeName`: `character varying`, `FillType`: `character varying`, `Globaltradeid`: `double precision`, `ID`: `integer`, `OrderType`: `character varying`, `Price`: `double precision`, `Quantity`: `double precision`, `Total`: `double precision`, `Tradeid`: `double precision`}
	_                    = bytes.MinRead
)

func testHistoricDataUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(historicDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(historicDatumColumns) == len(historicDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &HistoricDatum{}
	if err = randomize.Struct(seed, o, historicDatumDBTypes, true, historicDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HistoricDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := HistoricData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, historicDatumDBTypes, true, historicDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize HistoricDatum struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testHistoricDataSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(historicDatumColumns) == len(historicDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &HistoricDatum{}
	if err = randomize.Struct(seed, o, historicDatumDBTypes, true, historicDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HistoricDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := HistoricData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, historicDatumDBTypes, true, historicDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize HistoricDatum struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(historicDatumColumns, historicDatumPrimaryKeyColumns) {
		fields = historicDatumColumns
	} else {
		fields = strmangle.SetComplement(
			historicDatumColumns,
			historicDatumPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := HistoricDatumSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testHistoricDataUpsert(t *testing.T) {
	t.Parallel()

	if len(historicDatumColumns) == len(historicDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := HistoricDatum{}
	if err = randomize.Struct(seed, &o, historicDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize HistoricDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert HistoricDatum: %s", err)
	}

	count, err := HistoricData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, historicDatumDBTypes, false, historicDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize HistoricDatum struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert HistoricDatum: %s", err)
	}

	count, err = HistoricData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
