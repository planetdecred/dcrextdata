// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testChartData(t *testing.T) {
	t.Parallel()

	query := ChartData()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testChartDataDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChartDatum{}
	if err = randomize.Struct(seed, o, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ChartData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChartDataQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChartDatum{}
	if err = randomize.Struct(seed, o, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ChartData().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ChartData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChartDataSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChartDatum{}
	if err = randomize.Struct(seed, o, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChartDatumSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ChartData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChartDataExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChartDatum{}
	if err = randomize.Struct(seed, o, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ChartDatumExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ChartDatum exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ChartDatumExists to return true, but got false.")
	}
}

func testChartDataFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChartDatum{}
	if err = randomize.Struct(seed, o, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	chartDatumFound, err := FindChartDatum(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if chartDatumFound == nil {
		t.Error("want a record, got nil")
	}
}

func testChartDataBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChartDatum{}
	if err = randomize.Struct(seed, o, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ChartData().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testChartDataOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChartDatum{}
	if err = randomize.Struct(seed, o, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ChartData().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testChartDataAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chartDatumOne := &ChartDatum{}
	chartDatumTwo := &ChartDatum{}
	if err = randomize.Struct(seed, chartDatumOne, chartDatumDBTypes, false, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, chartDatumTwo, chartDatumDBTypes, false, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = chartDatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = chartDatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ChartData().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testChartDataCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	chartDatumOne := &ChartDatum{}
	chartDatumTwo := &ChartDatum{}
	if err = randomize.Struct(seed, chartDatumOne, chartDatumDBTypes, false, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, chartDatumTwo, chartDatumDBTypes, false, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = chartDatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = chartDatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ChartData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func chartDatumBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ChartDatum) error {
	*o = ChartDatum{}
	return nil
}

func chartDatumAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ChartDatum) error {
	*o = ChartDatum{}
	return nil
}

func chartDatumAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ChartDatum) error {
	*o = ChartDatum{}
	return nil
}

func chartDatumBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ChartDatum) error {
	*o = ChartDatum{}
	return nil
}

func chartDatumAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ChartDatum) error {
	*o = ChartDatum{}
	return nil
}

func chartDatumBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ChartDatum) error {
	*o = ChartDatum{}
	return nil
}

func chartDatumAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ChartDatum) error {
	*o = ChartDatum{}
	return nil
}

func chartDatumBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ChartDatum) error {
	*o = ChartDatum{}
	return nil
}

func chartDatumAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ChartDatum) error {
	*o = ChartDatum{}
	return nil
}

func testChartDataHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ChartDatum{}
	o := &ChartDatum{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, chartDatumDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ChartDatum object: %s", err)
	}

	AddChartDatumHook(boil.BeforeInsertHook, chartDatumBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	chartDatumBeforeInsertHooks = []ChartDatumHook{}

	AddChartDatumHook(boil.AfterInsertHook, chartDatumAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	chartDatumAfterInsertHooks = []ChartDatumHook{}

	AddChartDatumHook(boil.AfterSelectHook, chartDatumAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	chartDatumAfterSelectHooks = []ChartDatumHook{}

	AddChartDatumHook(boil.BeforeUpdateHook, chartDatumBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	chartDatumBeforeUpdateHooks = []ChartDatumHook{}

	AddChartDatumHook(boil.AfterUpdateHook, chartDatumAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	chartDatumAfterUpdateHooks = []ChartDatumHook{}

	AddChartDatumHook(boil.BeforeDeleteHook, chartDatumBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	chartDatumBeforeDeleteHooks = []ChartDatumHook{}

	AddChartDatumHook(boil.AfterDeleteHook, chartDatumAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	chartDatumAfterDeleteHooks = []ChartDatumHook{}

	AddChartDatumHook(boil.BeforeUpsertHook, chartDatumBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	chartDatumBeforeUpsertHooks = []ChartDatumHook{}

	AddChartDatumHook(boil.AfterUpsertHook, chartDatumAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	chartDatumAfterUpsertHooks = []ChartDatumHook{}
}

func testChartDataInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChartDatum{}
	if err = randomize.Struct(seed, o, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ChartData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChartDataInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChartDatum{}
	if err = randomize.Struct(seed, o, chartDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(chartDatumColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ChartData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChartDataReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChartDatum{}
	if err = randomize.Struct(seed, o, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testChartDataReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChartDatum{}
	if err = randomize.Struct(seed, o, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChartDatumSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testChartDataSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChartDatum{}
	if err = randomize.Struct(seed, o, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ChartData().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	chartDatumDBTypes = map[string]string{`Basevolume`: `double precision`, `Closing`: `double precision`, `CreatedOn`: `timestamp without time zone`, `ExchangeName`: `character varying`, `High`: `double precision`, `ID`: `integer`, `Low`: `double precision`, `Opening`: `double precision`, `Quotevolume`: `double precision`, `Volume`: `double precision`, `Weightedaverage`: `double precision`}
	_                 = bytes.MinRead
)

func testChartDataUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(chartDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(chartDatumColumns) == len(chartDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ChartDatum{}
	if err = randomize.Struct(seed, o, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ChartData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, chartDatumDBTypes, true, chartDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testChartDataSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(chartDatumColumns) == len(chartDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ChartDatum{}
	if err = randomize.Struct(seed, o, chartDatumDBTypes, true, chartDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ChartData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, chartDatumDBTypes, true, chartDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(chartDatumColumns, chartDatumPrimaryKeyColumns) {
		fields = chartDatumColumns
	} else {
		fields = strmangle.SetComplement(
			chartDatumColumns,
			chartDatumPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ChartDatumSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testChartDataUpsert(t *testing.T) {
	t.Parallel()

	if len(chartDatumColumns) == len(chartDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ChartDatum{}
	if err = randomize.Struct(seed, &o, chartDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ChartDatum: %s", err)
	}

	count, err := ChartData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, chartDatumDBTypes, false, chartDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ChartDatum struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ChartDatum: %s", err)
	}

	count, err = ChartData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
