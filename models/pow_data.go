// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PowDatum is an object representing the database table.
type PowDatum struct {
	ID                  int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	Powid               null.Float64 `boil:"powid" json:"powid,omitempty" toml:"powid" yaml:"powid,omitempty"`
	Hashrate            null.Float64 `boil:"hashrate" json:"hashrate,omitempty" toml:"hashrate" yaml:"hashrate,omitempty"`
	Efficiency          null.Float64 `boil:"efficiency" json:"efficiency,omitempty" toml:"efficiency" yaml:"efficiency,omitempty"`
	Progress            null.Float64 `boil:"progress" json:"progress,omitempty" toml:"progress" yaml:"progress,omitempty"`
	Workers             null.Float64 `boil:"workers" json:"workers,omitempty" toml:"workers" yaml:"workers,omitempty"`
	Currentnetworkblock null.Float64 `boil:"currentnetworkblock" json:"currentnetworkblock,omitempty" toml:"currentnetworkblock" yaml:"currentnetworkblock,omitempty"`
	Nextnetworkblock    null.Float64 `boil:"nextnetworkblock" json:"nextnetworkblock,omitempty" toml:"nextnetworkblock" yaml:"nextnetworkblock,omitempty"`
	Lastblock           null.Float64 `boil:"lastblock" json:"lastblock,omitempty" toml:"lastblock" yaml:"lastblock,omitempty"`
	Networkdiff         null.Float64 `boil:"networkdiff" json:"networkdiff,omitempty" toml:"networkdiff" yaml:"networkdiff,omitempty"`
	Esttime             null.Time    `boil:"esttime" json:"esttime,omitempty" toml:"esttime" yaml:"esttime,omitempty"`
	Estshare            null.Float64 `boil:"estshare" json:"estshare,omitempty" toml:"estshare" yaml:"estshare,omitempty"`
	Timesincelast       null.Float64 `boil:"timesincelast" json:"timesincelast,omitempty" toml:"timesincelast" yaml:"timesincelast,omitempty"`
	Nethashrate         null.Float64 `boil:"nethashrate" json:"nethashrate,omitempty" toml:"nethashrate" yaml:"nethashrate,omitempty"`
	Blocksfound         null.Float64 `boil:"blocksfound" json:"blocksfound,omitempty" toml:"blocksfound" yaml:"blocksfound,omitempty"`
	Totalminers         null.Float64 `boil:"totalminers" json:"totalminers,omitempty" toml:"totalminers" yaml:"totalminers,omitempty"`
	Networkdifficulty   null.Float64 `boil:"networkdifficulty" json:"networkdifficulty,omitempty" toml:"networkdifficulty" yaml:"networkdifficulty,omitempty"`
	Coinprice           null.String  `boil:"coinprice" json:"coinprice,omitempty" toml:"coinprice" yaml:"coinprice,omitempty"`
	Btcprice            null.String  `boil:"btcprice" json:"btcprice,omitempty" toml:"btcprice" yaml:"btcprice,omitempty"`
	Est                 null.Float64 `boil:"est" json:"est,omitempty" toml:"est" yaml:"est,omitempty"`
	CreatedOn           null.Float64 `boil:"created_on" json:"created_on,omitempty" toml:"created_on" yaml:"created_on,omitempty"`
	Blocksper           null.Float64 `boil:"blocksper" json:"blocksper,omitempty" toml:"blocksper" yaml:"blocksper,omitempty"`
	Luck                null.Float64 `boil:"luck" json:"luck,omitempty" toml:"luck" yaml:"luck,omitempty"`
	Ppshare             null.Float64 `boil:"ppshare" json:"ppshare,omitempty" toml:"ppshare" yaml:"ppshare,omitempty"`
	Totalkickback       null.Float64 `boil:"totalkickback" json:"totalkickback,omitempty" toml:"totalkickback" yaml:"totalkickback,omitempty"`
	Success             null.String  `boil:"success" json:"success,omitempty" toml:"success" yaml:"success,omitempty"`
	Lastupdate          null.Float64 `boil:"lastupdate" json:"lastupdate,omitempty" toml:"lastupdate" yaml:"lastupdate,omitempty"`
	Name                null.String  `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Port                null.Float64 `boil:"port" json:"port,omitempty" toml:"port" yaml:"port,omitempty"`
	Fees                null.Float64 `boil:"fees" json:"fees,omitempty" toml:"fees" yaml:"fees,omitempty"`
	Estimatecurrent     null.Float64 `boil:"estimatecurrent" json:"estimatecurrent,omitempty" toml:"estimatecurrent" yaml:"estimatecurrent,omitempty"`
	Estimatelast24h     null.Float64 `boil:"estimatelast24h" json:"estimatelast24h,omitempty" toml:"estimatelast24h" yaml:"estimatelast24h,omitempty"`
	Actual124h          null.Float64 `boil:"actual124h" json:"actual124h,omitempty" toml:"actual124h" yaml:"actual124h,omitempty"`
	Mbtcmhfactor        null.Float64 `boil:"mbtcmhfactor" json:"mbtcmhfactor,omitempty" toml:"mbtcmhfactor" yaml:"mbtcmhfactor,omitempty"`
	Hashratelast24h     null.Float64 `boil:"hashratelast24h" json:"hashratelast24h,omitempty" toml:"hashratelast24h" yaml:"hashratelast24h,omitempty"`
	Rentalcurrent       null.Float64 `boil:"rentalcurrent" json:"rentalcurrent,omitempty" toml:"rentalcurrent" yaml:"rentalcurrent,omitempty"`
	Height              null.Float64 `boil:"height" json:"height,omitempty" toml:"height" yaml:"height,omitempty"`
	Blocks24h           null.Float64 `boil:"blocks24h" json:"blocks24h,omitempty" toml:"blocks24h" yaml:"blocks24h,omitempty"`
	BTC24H              null.Float64 `boil:"btc24h" json:"btc24h,omitempty" toml:"btc24h" yaml:"btc24h,omitempty"`
	Currentheight       null.Float64 `boil:"currentheight" json:"currentheight,omitempty" toml:"currentheight" yaml:"currentheight,omitempty"`
	Total               null.Float64 `boil:"total" json:"total,omitempty" toml:"total" yaml:"total,omitempty"`
	Pos                 null.Float64 `boil:"pos" json:"pos,omitempty" toml:"pos" yaml:"pos,omitempty"`
	Pow                 null.Float64 `boil:"pow" json:"pow,omitempty" toml:"pow" yaml:"pow,omitempty"`
	Dev                 null.Float64 `boil:"dev" json:"dev,omitempty" toml:"dev" yaml:"dev,omitempty"`
	CreatedTime         null.Time    `boil:"created_time" json:"created_time,omitempty" toml:"created_time" yaml:"created_time,omitempty"`

	R *powDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L powDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PowDatumColumns = struct {
	ID                  string
	Powid               string
	Hashrate            string
	Efficiency          string
	Progress            string
	Workers             string
	Currentnetworkblock string
	Nextnetworkblock    string
	Lastblock           string
	Networkdiff         string
	Esttime             string
	Estshare            string
	Timesincelast       string
	Nethashrate         string
	Blocksfound         string
	Totalminers         string
	Networkdifficulty   string
	Coinprice           string
	Btcprice            string
	Est                 string
	CreatedOn           string
	Blocksper           string
	Luck                string
	Ppshare             string
	Totalkickback       string
	Success             string
	Lastupdate          string
	Name                string
	Port                string
	Fees                string
	Estimatecurrent     string
	Estimatelast24h     string
	Actual124h          string
	Mbtcmhfactor        string
	Hashratelast24h     string
	Rentalcurrent       string
	Height              string
	Blocks24h           string
	BTC24H              string
	Currentheight       string
	Total               string
	Pos                 string
	Pow                 string
	Dev                 string
	CreatedTime         string
}{
	ID:                  "id",
	Powid:               "powid",
	Hashrate:            "hashrate",
	Efficiency:          "efficiency",
	Progress:            "progress",
	Workers:             "workers",
	Currentnetworkblock: "currentnetworkblock",
	Nextnetworkblock:    "nextnetworkblock",
	Lastblock:           "lastblock",
	Networkdiff:         "networkdiff",
	Esttime:             "esttime",
	Estshare:            "estshare",
	Timesincelast:       "timesincelast",
	Nethashrate:         "nethashrate",
	Blocksfound:         "blocksfound",
	Totalminers:         "totalminers",
	Networkdifficulty:   "networkdifficulty",
	Coinprice:           "coinprice",
	Btcprice:            "btcprice",
	Est:                 "est",
	CreatedOn:           "created_on",
	Blocksper:           "blocksper",
	Luck:                "luck",
	Ppshare:             "ppshare",
	Totalkickback:       "totalkickback",
	Success:             "success",
	Lastupdate:          "lastupdate",
	Name:                "name",
	Port:                "port",
	Fees:                "fees",
	Estimatecurrent:     "estimatecurrent",
	Estimatelast24h:     "estimatelast24h",
	Actual124h:          "actual124h",
	Mbtcmhfactor:        "mbtcmhfactor",
	Hashratelast24h:     "hashratelast24h",
	Rentalcurrent:       "rentalcurrent",
	Height:              "height",
	Blocks24h:           "blocks24h",
	BTC24H:              "btc24h",
	Currentheight:       "currentheight",
	Total:               "total",
	Pos:                 "pos",
	Pow:                 "pow",
	Dev:                 "dev",
	CreatedTime:         "created_time",
}

// PowDatumRels is where relationship names are stored.
var PowDatumRels = struct {
}{}

// powDatumR is where relationships are stored.
type powDatumR struct {
}

// NewStruct creates a new relationship struct
func (*powDatumR) NewStruct() *powDatumR {
	return &powDatumR{}
}

// powDatumL is where Load methods for each relationship are stored.
type powDatumL struct{}

var (
	powDatumColumns               = []string{"id", "powid", "hashrate", "efficiency", "progress", "workers", "currentnetworkblock", "nextnetworkblock", "lastblock", "networkdiff", "esttime", "estshare", "timesincelast", "nethashrate", "blocksfound", "totalminers", "networkdifficulty", "coinprice", "btcprice", "est", "created_on", "blocksper", "luck", "ppshare", "totalkickback", "success", "lastupdate", "name", "port", "fees", "estimatecurrent", "estimatelast24h", "actual124h", "mbtcmhfactor", "hashratelast24h", "rentalcurrent", "height", "blocks24h", "btc24h", "currentheight", "total", "pos", "pow", "dev", "created_time"}
	powDatumColumnsWithoutDefault = []string{"powid", "hashrate", "efficiency", "progress", "workers", "currentnetworkblock", "nextnetworkblock", "lastblock", "networkdiff", "esttime", "estshare", "timesincelast", "nethashrate", "blocksfound", "totalminers", "networkdifficulty", "coinprice", "btcprice", "est", "created_on", "blocksper", "luck", "ppshare", "totalkickback", "success", "lastupdate", "name", "port", "fees", "estimatecurrent", "estimatelast24h", "actual124h", "mbtcmhfactor", "hashratelast24h", "rentalcurrent", "height", "blocks24h", "btc24h", "currentheight", "total", "pos", "pow", "dev", "created_time"}
	powDatumColumnsWithDefault    = []string{"id"}
	powDatumPrimaryKeyColumns     = []string{"id"}
)

type (
	// PowDatumSlice is an alias for a slice of pointers to PowDatum.
	// This should generally be used opposed to []PowDatum.
	PowDatumSlice []*PowDatum
	// PowDatumHook is the signature for custom PowDatum hook methods
	PowDatumHook func(context.Context, boil.ContextExecutor, *PowDatum) error

	powDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	powDatumType                 = reflect.TypeOf(&PowDatum{})
	powDatumMapping              = queries.MakeStructMapping(powDatumType)
	powDatumPrimaryKeyMapping, _ = queries.BindMapping(powDatumType, powDatumMapping, powDatumPrimaryKeyColumns)
	powDatumInsertCacheMut       sync.RWMutex
	powDatumInsertCache          = make(map[string]insertCache)
	powDatumUpdateCacheMut       sync.RWMutex
	powDatumUpdateCache          = make(map[string]updateCache)
	powDatumUpsertCacheMut       sync.RWMutex
	powDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var powDatumBeforeInsertHooks []PowDatumHook
var powDatumBeforeUpdateHooks []PowDatumHook
var powDatumBeforeDeleteHooks []PowDatumHook
var powDatumBeforeUpsertHooks []PowDatumHook

var powDatumAfterInsertHooks []PowDatumHook
var powDatumAfterSelectHooks []PowDatumHook
var powDatumAfterUpdateHooks []PowDatumHook
var powDatumAfterDeleteHooks []PowDatumHook
var powDatumAfterUpsertHooks []PowDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PowDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range powDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PowDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range powDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PowDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range powDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PowDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range powDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PowDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range powDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PowDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range powDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PowDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range powDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PowDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range powDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PowDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range powDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPowDatumHook registers your hook function for all future operations.
func AddPowDatumHook(hookPoint boil.HookPoint, powDatumHook PowDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		powDatumBeforeInsertHooks = append(powDatumBeforeInsertHooks, powDatumHook)
	case boil.BeforeUpdateHook:
		powDatumBeforeUpdateHooks = append(powDatumBeforeUpdateHooks, powDatumHook)
	case boil.BeforeDeleteHook:
		powDatumBeforeDeleteHooks = append(powDatumBeforeDeleteHooks, powDatumHook)
	case boil.BeforeUpsertHook:
		powDatumBeforeUpsertHooks = append(powDatumBeforeUpsertHooks, powDatumHook)
	case boil.AfterInsertHook:
		powDatumAfterInsertHooks = append(powDatumAfterInsertHooks, powDatumHook)
	case boil.AfterSelectHook:
		powDatumAfterSelectHooks = append(powDatumAfterSelectHooks, powDatumHook)
	case boil.AfterUpdateHook:
		powDatumAfterUpdateHooks = append(powDatumAfterUpdateHooks, powDatumHook)
	case boil.AfterDeleteHook:
		powDatumAfterDeleteHooks = append(powDatumAfterDeleteHooks, powDatumHook)
	case boil.AfterUpsertHook:
		powDatumAfterUpsertHooks = append(powDatumAfterUpsertHooks, powDatumHook)
	}
}

// One returns a single powDatum record from the query.
func (q powDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PowDatum, error) {
	o := &PowDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for pow_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PowDatum records from the query.
func (q powDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (PowDatumSlice, error) {
	var o []*PowDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PowDatum slice")
	}

	if len(powDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PowDatum records in the query.
func (q powDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count pow_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q powDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if pow_data exists")
	}

	return count > 0, nil
}

// PowData retrieves all the records using an executor.
func PowData(mods ...qm.QueryMod) powDatumQuery {
	mods = append(mods, qm.From("\"pow_data\""))
	return powDatumQuery{NewQuery(mods...)}
}

// FindPowDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPowDatum(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PowDatum, error) {
	powDatumObj := &PowDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pow_data\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, powDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from pow_data")
	}

	return powDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PowDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pow_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(powDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	powDatumInsertCacheMut.RLock()
	cache, cached := powDatumInsertCache[key]
	powDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			powDatumColumns,
			powDatumColumnsWithDefault,
			powDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(powDatumType, powDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(powDatumType, powDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pow_data\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pow_data\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into pow_data")
	}

	if !cached {
		powDatumInsertCacheMut.Lock()
		powDatumInsertCache[key] = cache
		powDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PowDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PowDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	powDatumUpdateCacheMut.RLock()
	cache, cached := powDatumUpdateCache[key]
	powDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			powDatumColumns,
			powDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update pow_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pow_data\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, powDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(powDatumType, powDatumMapping, append(wl, powDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update pow_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for pow_data")
	}

	if !cached {
		powDatumUpdateCacheMut.Lock()
		powDatumUpdateCache[key] = cache
		powDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q powDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for pow_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for pow_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PowDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), powDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pow_data\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, powDatumPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in powDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all powDatum")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PowDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pow_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(powDatumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	powDatumUpsertCacheMut.RLock()
	cache, cached := powDatumUpsertCache[key]
	powDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			powDatumColumns,
			powDatumColumnsWithDefault,
			powDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			powDatumColumns,
			powDatumPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert pow_data, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(powDatumPrimaryKeyColumns))
			copy(conflict, powDatumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pow_data\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(powDatumType, powDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(powDatumType, powDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert pow_data")
	}

	if !cached {
		powDatumUpsertCacheMut.Lock()
		powDatumUpsertCache[key] = cache
		powDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PowDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PowDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PowDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), powDatumPrimaryKeyMapping)
	sql := "DELETE FROM \"pow_data\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from pow_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for pow_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q powDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no powDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pow_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pow_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PowDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PowDatum slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(powDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), powDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pow_data\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, powDatumPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from powDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pow_data")
	}

	if len(powDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PowDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPowDatum(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PowDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PowDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), powDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pow_data\".* FROM \"pow_data\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, powDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PowDatumSlice")
	}

	*o = slice

	return nil
}

// PowDatumExists checks if the PowDatum row exists.
func PowDatumExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pow_data\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if pow_data exists")
	}

	return exists, nil
}
