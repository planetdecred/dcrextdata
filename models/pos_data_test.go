// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPosData(t *testing.T) {
	t.Parallel()

	query := PosData()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPosDataDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PosDatum{}
	if err = randomize.Struct(seed, o, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PosData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPosDataQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PosDatum{}
	if err = randomize.Struct(seed, o, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PosData().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PosData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPosDataSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PosDatum{}
	if err = randomize.Struct(seed, o, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PosDatumSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PosData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPosDataExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PosDatum{}
	if err = randomize.Struct(seed, o, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PosDatumExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PosDatum exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PosDatumExists to return true, but got false.")
	}
}

func testPosDataFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PosDatum{}
	if err = randomize.Struct(seed, o, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	posDatumFound, err := FindPosDatum(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if posDatumFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPosDataBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PosDatum{}
	if err = randomize.Struct(seed, o, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PosData().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPosDataOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PosDatum{}
	if err = randomize.Struct(seed, o, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PosData().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPosDataAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	posDatumOne := &PosDatum{}
	posDatumTwo := &PosDatum{}
	if err = randomize.Struct(seed, posDatumOne, posDatumDBTypes, false, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, posDatumTwo, posDatumDBTypes, false, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = posDatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = posDatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PosData().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPosDataCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	posDatumOne := &PosDatum{}
	posDatumTwo := &PosDatum{}
	if err = randomize.Struct(seed, posDatumOne, posDatumDBTypes, false, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, posDatumTwo, posDatumDBTypes, false, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = posDatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = posDatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PosData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func posDatumBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PosDatum) error {
	*o = PosDatum{}
	return nil
}

func posDatumAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PosDatum) error {
	*o = PosDatum{}
	return nil
}

func posDatumAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PosDatum) error {
	*o = PosDatum{}
	return nil
}

func posDatumBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PosDatum) error {
	*o = PosDatum{}
	return nil
}

func posDatumAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PosDatum) error {
	*o = PosDatum{}
	return nil
}

func posDatumBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PosDatum) error {
	*o = PosDatum{}
	return nil
}

func posDatumAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PosDatum) error {
	*o = PosDatum{}
	return nil
}

func posDatumBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PosDatum) error {
	*o = PosDatum{}
	return nil
}

func posDatumAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PosDatum) error {
	*o = PosDatum{}
	return nil
}

func testPosDataHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PosDatum{}
	o := &PosDatum{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, posDatumDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PosDatum object: %s", err)
	}

	AddPosDatumHook(boil.BeforeInsertHook, posDatumBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	posDatumBeforeInsertHooks = []PosDatumHook{}

	AddPosDatumHook(boil.AfterInsertHook, posDatumAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	posDatumAfterInsertHooks = []PosDatumHook{}

	AddPosDatumHook(boil.AfterSelectHook, posDatumAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	posDatumAfterSelectHooks = []PosDatumHook{}

	AddPosDatumHook(boil.BeforeUpdateHook, posDatumBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	posDatumBeforeUpdateHooks = []PosDatumHook{}

	AddPosDatumHook(boil.AfterUpdateHook, posDatumAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	posDatumAfterUpdateHooks = []PosDatumHook{}

	AddPosDatumHook(boil.BeforeDeleteHook, posDatumBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	posDatumBeforeDeleteHooks = []PosDatumHook{}

	AddPosDatumHook(boil.AfterDeleteHook, posDatumAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	posDatumAfterDeleteHooks = []PosDatumHook{}

	AddPosDatumHook(boil.BeforeUpsertHook, posDatumBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	posDatumBeforeUpsertHooks = []PosDatumHook{}

	AddPosDatumHook(boil.AfterUpsertHook, posDatumAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	posDatumAfterUpsertHooks = []PosDatumHook{}
}

func testPosDataInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PosDatum{}
	if err = randomize.Struct(seed, o, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PosData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPosDataInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PosDatum{}
	if err = randomize.Struct(seed, o, posDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(posDatumColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PosData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPosDataReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PosDatum{}
	if err = randomize.Struct(seed, o, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPosDataReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PosDatum{}
	if err = randomize.Struct(seed, o, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PosDatumSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPosDataSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PosDatum{}
	if err = randomize.Struct(seed, o, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PosData().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	posDatumDBTypes = map[string]string{`Apienabled`: `boolean`, `Apiversionssupported`: `ARRAYinteger`, `CreatedOn`: `date`, `ID`: `integer`, `Immature`: `integer`, `LastUpdated`: `bigint`, `Launched`: `bigint`, `Live`: `integer`, `Missed`: `integer`, `Network`: `character varying`, `NetworkURL`: `character varying`, `Poolfees`: `double precision`, `Posid`: `character varying`, `Proportionlive`: `double precision`, `Proportionmissed`: `double precision`, `Usercount`: `integer`, `Usercountactive`: `integer`, `Voted`: `integer`}
	_               = bytes.MinRead
)

func testPosDataUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(posDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(posDatumColumns) == len(posDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PosDatum{}
	if err = randomize.Struct(seed, o, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PosData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, posDatumDBTypes, true, posDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPosDataSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(posDatumColumns) == len(posDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PosDatum{}
	if err = randomize.Struct(seed, o, posDatumDBTypes, true, posDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PosData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, posDatumDBTypes, true, posDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(posDatumColumns, posDatumPrimaryKeyColumns) {
		fields = posDatumColumns
	} else {
		fields = strmangle.SetComplement(
			posDatumColumns,
			posDatumPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PosDatumSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPosDataUpsert(t *testing.T) {
	t.Parallel()

	if len(posDatumColumns) == len(posDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PosDatum{}
	if err = randomize.Struct(seed, &o, posDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PosDatum: %s", err)
	}

	count, err := PosData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, posDatumDBTypes, false, posDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PosDatum struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PosDatum: %s", err)
	}

	count, err = PosData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
