// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// PosDatum is an object representing the database table.
type PosDatum struct {
	ID                   int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	Posid                null.String       `boil:"posid" json:"posid,omitempty" toml:"posid" yaml:"posid,omitempty"`
	Apienabled           null.String       `boil:"apienabled" json:"apienabled,omitempty" toml:"apienabled" yaml:"apienabled,omitempty"`
	Network              null.String       `boil:"network" json:"network,omitempty" toml:"network" yaml:"network,omitempty"`
	NetworkURL           null.String       `boil:"network_url" json:"network_url,omitempty" toml:"network_url" yaml:"network_url,omitempty"`
	Launched             null.String       `boil:"launched" json:"launched,omitempty" toml:"launched" yaml:"launched,omitempty"`
	LastUpdated          null.String       `boil:"last_updated" json:"last_updated,omitempty" toml:"last_updated" yaml:"last_updated,omitempty"`
	Immature             null.String       `boil:"immature" json:"immature,omitempty" toml:"immature" yaml:"immature,omitempty"`
	Live                 null.String       `boil:"live" json:"live,omitempty" toml:"live" yaml:"live,omitempty"`
	Voted                types.NullDecimal `boil:"voted" json:"voted,omitempty" toml:"voted" yaml:"voted,omitempty"`
	Missed               types.NullDecimal `boil:"missed" json:"missed,omitempty" toml:"missed" yaml:"missed,omitempty"`
	Poolfees             types.NullDecimal `boil:"poolfees" json:"poolfees,omitempty" toml:"poolfees" yaml:"poolfees,omitempty"`
	Proportionlive       types.NullDecimal `boil:"proportionlive" json:"proportionlive,omitempty" toml:"proportionlive" yaml:"proportionlive,omitempty"`
	Proportionmissed     types.NullDecimal `boil:"proportionmissed" json:"proportionmissed,omitempty" toml:"proportionmissed" yaml:"proportionmissed,omitempty"`
	Usercount            types.NullDecimal `boil:"usercount" json:"usercount,omitempty" toml:"usercount" yaml:"usercount,omitempty"`
	Usercountactive      types.NullDecimal `boil:"usercountactive" json:"usercountactive,omitempty" toml:"usercountactive" yaml:"usercountactive,omitempty"`
	Apiversionssupported types.StringArray `boil:"apiversionssupported" json:"apiversionssupported,omitempty" toml:"apiversionssupported" yaml:"apiversionssupported,omitempty"`
	CreatedOn            null.Time         `boil:"created_on" json:"created_on,omitempty" toml:"created_on" yaml:"created_on,omitempty"`

	R *posDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L posDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PosDatumColumns = struct {
	ID                   string
	Posid                string
	Apienabled           string
	Network              string
	NetworkURL           string
	Launched             string
	LastUpdated          string
	Immature             string
	Live                 string
	Voted                string
	Missed               string
	Poolfees             string
	Proportionlive       string
	Proportionmissed     string
	Usercount            string
	Usercountactive      string
	Apiversionssupported string
	CreatedOn            string
}{
	ID:                   "id",
	Posid:                "posid",
	Apienabled:           "apienabled",
	Network:              "network",
	NetworkURL:           "network_url",
	Launched:             "launched",
	LastUpdated:          "last_updated",
	Immature:             "immature",
	Live:                 "live",
	Voted:                "voted",
	Missed:               "missed",
	Poolfees:             "poolfees",
	Proportionlive:       "proportionlive",
	Proportionmissed:     "proportionmissed",
	Usercount:            "usercount",
	Usercountactive:      "usercountactive",
	Apiversionssupported: "apiversionssupported",
	CreatedOn:            "created_on",
}

// PosDatumRels is where relationship names are stored.
var PosDatumRels = struct {
}{}

// posDatumR is where relationships are stored.
type posDatumR struct {
}

// NewStruct creates a new relationship struct
func (*posDatumR) NewStruct() *posDatumR {
	return &posDatumR{}
}

// posDatumL is where Load methods for each relationship are stored.
type posDatumL struct{}

var (
	posDatumColumns               = []string{"id", "posid", "apienabled", "network", "network_url", "launched", "last_updated", "immature", "live", "voted", "missed", "poolfees", "proportionlive", "proportionmissed", "usercount", "usercountactive", "apiversionssupported", "created_on"}
	posDatumColumnsWithoutDefault = []string{"posid", "apienabled", "network", "network_url", "launched", "last_updated", "immature", "live", "voted", "missed", "poolfees", "proportionlive", "proportionmissed", "usercount", "usercountactive", "apiversionssupported", "created_on"}
	posDatumColumnsWithDefault    = []string{"id"}
	posDatumPrimaryKeyColumns     = []string{"id"}
)

type (
	// PosDatumSlice is an alias for a slice of pointers to PosDatum.
	// This should generally be used opposed to []PosDatum.
	PosDatumSlice []*PosDatum
	// PosDatumHook is the signature for custom PosDatum hook methods
	PosDatumHook func(context.Context, boil.ContextExecutor, *PosDatum) error

	posDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	posDatumType                 = reflect.TypeOf(&PosDatum{})
	posDatumMapping              = queries.MakeStructMapping(posDatumType)
	posDatumPrimaryKeyMapping, _ = queries.BindMapping(posDatumType, posDatumMapping, posDatumPrimaryKeyColumns)
	posDatumInsertCacheMut       sync.RWMutex
	posDatumInsertCache          = make(map[string]insertCache)
	posDatumUpdateCacheMut       sync.RWMutex
	posDatumUpdateCache          = make(map[string]updateCache)
	posDatumUpsertCacheMut       sync.RWMutex
	posDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var posDatumBeforeInsertHooks []PosDatumHook
var posDatumBeforeUpdateHooks []PosDatumHook
var posDatumBeforeDeleteHooks []PosDatumHook
var posDatumBeforeUpsertHooks []PosDatumHook

var posDatumAfterInsertHooks []PosDatumHook
var posDatumAfterSelectHooks []PosDatumHook
var posDatumAfterUpdateHooks []PosDatumHook
var posDatumAfterDeleteHooks []PosDatumHook
var posDatumAfterUpsertHooks []PosDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PosDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range posDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PosDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range posDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PosDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range posDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PosDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range posDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PosDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range posDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PosDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range posDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PosDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range posDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PosDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range posDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PosDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range posDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPosDatumHook registers your hook function for all future operations.
func AddPosDatumHook(hookPoint boil.HookPoint, posDatumHook PosDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		posDatumBeforeInsertHooks = append(posDatumBeforeInsertHooks, posDatumHook)
	case boil.BeforeUpdateHook:
		posDatumBeforeUpdateHooks = append(posDatumBeforeUpdateHooks, posDatumHook)
	case boil.BeforeDeleteHook:
		posDatumBeforeDeleteHooks = append(posDatumBeforeDeleteHooks, posDatumHook)
	case boil.BeforeUpsertHook:
		posDatumBeforeUpsertHooks = append(posDatumBeforeUpsertHooks, posDatumHook)
	case boil.AfterInsertHook:
		posDatumAfterInsertHooks = append(posDatumAfterInsertHooks, posDatumHook)
	case boil.AfterSelectHook:
		posDatumAfterSelectHooks = append(posDatumAfterSelectHooks, posDatumHook)
	case boil.AfterUpdateHook:
		posDatumAfterUpdateHooks = append(posDatumAfterUpdateHooks, posDatumHook)
	case boil.AfterDeleteHook:
		posDatumAfterDeleteHooks = append(posDatumAfterDeleteHooks, posDatumHook)
	case boil.AfterUpsertHook:
		posDatumAfterUpsertHooks = append(posDatumAfterUpsertHooks, posDatumHook)
	}
}

// One returns a single posDatum record from the query.
func (q posDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PosDatum, error) {
	o := &PosDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for pos_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PosDatum records from the query.
func (q posDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (PosDatumSlice, error) {
	var o []*PosDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PosDatum slice")
	}

	if len(posDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PosDatum records in the query.
func (q posDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count pos_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q posDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if pos_data exists")
	}

	return count > 0, nil
}

// PosData retrieves all the records using an executor.
func PosData(mods ...qm.QueryMod) posDatumQuery {
	mods = append(mods, qm.From("\"pos_data\""))
	return posDatumQuery{NewQuery(mods...)}
}

// FindPosDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPosDatum(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PosDatum, error) {
	posDatumObj := &PosDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pos_data\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, posDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from pos_data")
	}

	return posDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PosDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pos_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(posDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	posDatumInsertCacheMut.RLock()
	cache, cached := posDatumInsertCache[key]
	posDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			posDatumColumns,
			posDatumColumnsWithDefault,
			posDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(posDatumType, posDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(posDatumType, posDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pos_data\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pos_data\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into pos_data")
	}

	if !cached {
		posDatumInsertCacheMut.Lock()
		posDatumInsertCache[key] = cache
		posDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PosDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PosDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	posDatumUpdateCacheMut.RLock()
	cache, cached := posDatumUpdateCache[key]
	posDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			posDatumColumns,
			posDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update pos_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pos_data\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, posDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(posDatumType, posDatumMapping, append(wl, posDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update pos_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for pos_data")
	}

	if !cached {
		posDatumUpdateCacheMut.Lock()
		posDatumUpdateCache[key] = cache
		posDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q posDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for pos_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for pos_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PosDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), posDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pos_data\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, posDatumPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in posDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all posDatum")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PosDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pos_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(posDatumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	posDatumUpsertCacheMut.RLock()
	cache, cached := posDatumUpsertCache[key]
	posDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			posDatumColumns,
			posDatumColumnsWithDefault,
			posDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			posDatumColumns,
			posDatumPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert pos_data, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(posDatumPrimaryKeyColumns))
			copy(conflict, posDatumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pos_data\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(posDatumType, posDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(posDatumType, posDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert pos_data")
	}

	if !cached {
		posDatumUpsertCacheMut.Lock()
		posDatumUpsertCache[key] = cache
		posDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PosDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PosDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PosDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), posDatumPrimaryKeyMapping)
	sql := "DELETE FROM \"pos_data\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from pos_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for pos_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q posDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no posDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pos_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pos_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PosDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PosDatum slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(posDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), posDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pos_data\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, posDatumPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from posDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pos_data")
	}

	if len(posDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PosDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPosDatum(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PosDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PosDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), posDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pos_data\".* FROM \"pos_data\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, posDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PosDatumSlice")
	}

	*o = slice

	return nil
}

// PosDatumExists checks if the PosDatum row exists.
func PosDatumExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pos_data\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if pos_data exists")
	}

	return exists, nil
}
